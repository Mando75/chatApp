#!/usr/bin/env node

/**
 * Module dependencies.
 */
let app = require('../app');
let debug = require('debug')('chatapp:server');
let http = require('http');
let htmlchars = require('htmlspecialchars');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);

/**
 * Set up the chat system. Code inspired by http://psitsmike.com/2011/09/node-js-and-socket-io-chat-tutorial/
 */

//all the users connected to the chat
let users = {};

let io = require('socket.io').listen(server);
// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.sockets.on('connection', function (socket) {

  // when the client emits 'sendchat', this listens and executes
  socket.on('sendchat', function (data) {
    // we tell the client to execute 'updatechat' with 2 parameters
    io.sockets.emit('updatechat', socket.username, htmlchars(data));
  });
  // when the user updates their status, broadcast it to the public
  socket.on('updatestatus', function(status) {
    io.sockets.emit('statusupdate', socket.user_id, status);
  });
  // when the client emits 'adduser', this listens and executes
  socket.on('adduser', function(user) {
    // we store the username in the socket session for this client
    socket.username = user.username;
    socket.user_id = user.user_id;
    console.log(socket.user_id, socket.username);
    // add the client's username to the global list
    users[user.user_id] = user;
    // echo to client they've connected
    socket.emit('updatechat', 'SERVER', 'you have connected');
    // echo globally (all clients) that a person has connected
    socket.broadcast.emit('updatechat', 'SERVER', user.username + ' has connected');
    // update the list of users in chat, client-side
    io.sockets.emit('updateusers', users);
  });

  // when the user disconnects.. perform this
  socket.on('disconnect', function(){
    // remove the username from global usernames list
    delete users[socket.user_id];
    // update list of users in chat, client-side
    io.sockets.emit('updateusers', users);
    // echo globally that this client has left
    socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
